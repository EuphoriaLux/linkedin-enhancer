{"version":3,"file":"content.bundle.js","mappings":"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","sources":["webpack://linkedin-comment-generator/./src/content_scripts/content.js"],"sourcesContent":["// content_scripts/content.js\r\n\r\n(function() {\r\n    if (window.linkedInEnhancerInitialized) {\r\n        console.log(\"LinkedIn Comment Generator already initialized.\");\r\n        return;\r\n    }\r\n\r\n    window.linkedInEnhancerInitialized = true;\r\n\r\n    const DEBUG = true;\r\n\r\n    function debugLog(...args) {\r\n        if (DEBUG) {\r\n            console.log(...args);\r\n        }\r\n    }\r\n\r\n    function debugError(...args) {\r\n        if (DEBUG) {\r\n            console.error(...args);\r\n        }\r\n    }\r\n\r\n    // Function to inject buttons into posts\r\n    function injectButtons() {\r\n        // Define selectors to identify post containers\r\n        const postSelectors = [\r\n            'div.occludable-update' // Outermost LinkedIn post container\r\n            // Removed 'div.feed-shared-update-v2' to prevent duplicate injections\r\n        ];\r\n\r\n        postSelectors.forEach(selector => {\r\n            const posts = document.querySelectorAll(selector);\r\n            posts.forEach(post => {\r\n                const postId = post.getAttribute('data-urn') || 'unknown-post';\r\n                debugLog(`Processing Post ID: ${postId}`);\r\n\r\n                // Avoid injecting multiple buttons by checking a data attribute\r\n                if (post.getAttribute('data-comment-button-injected') === 'true') {\r\n                    debugLog(`Post ID: ${postId} already has a Generate Comment button.`);\r\n                    return;\r\n                }\r\n\r\n                // Create the button\r\n                const button = document.createElement('button');\r\n                button.innerText = 'Generate Comment';\r\n                button.className = 'generate-comment-btn';\r\n                // Apply styles via CSS classes instead of inline styles for better maintainability\r\n                button.style.marginTop = '10px';\r\n                button.style.padding = '5px 10px';\r\n                button.style.backgroundColor = '#0073b1';\r\n                button.style.color = '#fff';\r\n                button.style.border = 'none';\r\n                button.style.borderRadius = '4px';\r\n                button.style.cursor = 'pointer';\r\n\r\n                // Append the button to the post\r\n                post.appendChild(button);\r\n\r\n                // Add click event listener\r\n                button.addEventListener('click', () => {\r\n                    handleGenerateComment(post);\r\n                });\r\n\r\n                // Mark this post as having the button injected\r\n                post.setAttribute('data-comment-button-injected', 'true');\r\n\r\n                debugLog(`Injected Generate Comment button into Post ID: ${postId}`);\r\n            });\r\n        });\r\n    }\r\n\r\n    // Function to handle button clicks\r\n    function handleGenerateComment(post) {\r\n        // Extract post identifier or content if needed\r\n        const postId = post.getAttribute('data-urn') || 'unknown-post';\r\n\r\n        // Adjust these selectors as per your inspection\r\n        const postContentElement = post.querySelector('div.feed-shared-update-v2__description-wrapper, div.ember-view span.break-words');\r\n        const postContent = postContentElement ? postContentElement.innerText.trim() : 'No content available';\r\n\r\n        // Extract poster's name\r\n        const posterNameElement = post.querySelector('span.feed-shared-actor__name, a.feed-shared-actor__name-link, span.actor-name');\r\n        const posterName = posterNameElement ? posterNameElement.innerText.trim() : 'Unknown User';\r\n\r\n        debugLog(`Generate Comment clicked for Post ID: ${postId}, Poster: ${posterName}`);\r\n        debugLog(`Post Content: ${postContent}`);\r\n\r\n        // Disable the button to prevent multiple clicks\r\n        const button = post.querySelector('.generate-comment-btn');\r\n        if (button) {\r\n            button.disabled = true;\r\n            button.innerText = 'Generating...';\r\n        }\r\n\r\n        // Send message to background script to generate comment\r\n        chrome.runtime.sendMessage({\r\n            action: 'generateComment',\r\n            postId: postId,\r\n            postContent: postContent,\r\n            posterName: posterName\r\n        }, (response) => {\r\n            // Re-enable the button\r\n            if (button) {\r\n                button.disabled = false;\r\n                button.innerText = 'Generate Comment';\r\n            }\r\n\r\n            if (chrome.runtime.lastError) {\r\n                debugError('Runtime error:', chrome.runtime.lastError);\r\n                alert('Failed to generate comment. Please try again.');\r\n                return;\r\n            }\r\n\r\n            if (response && response.comment) {\r\n                debugLog('Received generated comment:', response.comment);\r\n                // Open a new window to display the comment\r\n                openCommentWindow(response.comment);\r\n            } else if (response && response.error) {\r\n                debugError('Error generating comment:', response.error);\r\n                alert(response.error);\r\n            } else {\r\n                debugError('No comment received in response.');\r\n                alert('Failed to generate comment. Please try again.');\r\n            }\r\n        });\r\n    }\r\n\r\n    function openCommentWindow(comment) {\r\n        const width = 600; // Increased width\r\n        const height = 400; // Increased height\r\n        const left = (screen.width / 2) - (width / 2);\r\n        const top = (screen.height / 2) - (height / 2);\r\n    \r\n        // Encode the comment to include in URL\r\n        const encodedComment = encodeURIComponent(comment);\r\n        const windowURL = chrome.runtime.getURL(`window.html?comment=${encodedComment}`); // Ensure the path is correct\r\n    \r\n        // Create the window\r\n        const commentWindow = window.open(\r\n            windowURL,\r\n            `CommentWindow_${Date.now()}`,\r\n            `width=${width},height=${height},top=${top},left=${left}`\r\n        );\r\n    \r\n        if (!commentWindow) {\r\n            alert('Failed to open comment window. Please allow popups for this site.');\r\n        }\r\n    }\r\n\r\n    // Function to sanitize HTML to prevent XSS\r\n    function sanitizeHTML(str) {\r\n        const temp = document.createElement('div');\r\n        temp.textContent = str;\r\n        return temp.innerHTML;\r\n    }\r\n\r\n    // Setup MutationObserver to handle dynamically loaded posts\r\n    function setupMutationObserver() {\r\n        const targetNode = document.body;\r\n        const config = { childList: true, subtree: true };\r\n\r\n        // Debounce the injectButtons function to prevent rapid, repeated calls\r\n        function debounce(func, wait) {\r\n            let timeout;\r\n            return function(...args) {\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(() => func.apply(this, args), wait);\r\n            };\r\n        }\r\n\r\n        const debouncedInjectButtons = debounce(injectButtons, 500);\r\n\r\n        const callback = function(mutationsList) {\r\n            for (const mutation of mutationsList) {\r\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\r\n                    debouncedInjectButtons(); // Use the debounced function\r\n                }\r\n            }\r\n        };\r\n\r\n        const observer = new MutationObserver(callback);\r\n        observer.observe(targetNode, config);\r\n\r\n        debugLog('MutationObserver set up successfully.');\r\n    }\r\n\r\n    // Initial injection of buttons\r\n    injectButtons();\r\n\r\n    // Set up MutationObserver for dynamic content\r\n    setupMutationObserver();\r\n\r\n})();\r\n"],"names":["func","timeout","targetNode","debouncedInjectButtons","window","linkedInEnhancerInitialized","console","log","injectButtons","document","body","_this","_len","arguments","length","args","Array","_key","clearTimeout","setTimeout","apply","MutationObserver","mutationsList","_step","_iterator","_createForOfIteratorHelper","s","n","done","mutation","value","type","addedNodes","err","e","f","observe","childList","subtree","debugLog","_console","debugError","_console2","error","forEach","selector","querySelectorAll","post","postId","getAttribute","concat","button","createElement","innerText","className","style","marginTop","padding","backgroundColor","color","border","borderRadius","cursor","appendChild","addEventListener","postContentElement","querySelector","postContent","trim","posterNameElement","posterName","disabled","chrome","runtime","sendMessage","action","response","lastError","alert","comment","left","top","encodedComment","windowURL","screen","width","height","encodeURIComponent","getURL","open","Date","now","handleGenerateComment","setAttribute"],"sourceRoot":""}