{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://linkedin-comment-generator/./src/background/api-services.js","webpack://linkedin-comment-generator/./src/background/background.js"],"sourcesContent":["// src/background/api-services.js\r\n\r\nexport class APIService {\r\n    /**\r\n     * Retrieves settings from chrome.storage.sync\r\n     * @returns {Promise<Object>} An object containing all relevant settings.\r\n     */\r\n    static async getSettings() {\r\n        return new Promise((resolve, reject) => {\r\n            chrome.storage.sync.get(\r\n                ['apiKey', 'defaultPrompt', 'aiModel', 'temperature', 'maxTokens', 'blacklist'],\r\n                (result) => {\r\n                    if (chrome.runtime.lastError) {\r\n                        reject(new Error(chrome.runtime.lastError.message));\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                }\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Makes a POST request to the AI API.\r\n     * @param {string} prompt - The prompt to send to the AI model.\r\n     * @param {Object} settings - The settings retrieved from storage.\r\n     * @returns {Promise<string>} The generated text from the AI.\r\n     */\r\n    static async makeApiRequest(prompt, settings) {\r\n        const apiBaseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/';\r\n        const model = settings.aiModel || 'gemini-pro';\r\n        const apiUrl = `${apiBaseUrl}${model}:generateContent?key=${settings.apiKey}`;\r\n\r\n        const response = await fetch(apiUrl, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                contents: [{\r\n                    parts: [{\r\n                        text: prompt\r\n                    }]\r\n                }],\r\n                generationConfig: {\r\n                    temperature: settings.temperature || 0.7,\r\n                    maxOutputTokens: settings.maxTokens || 150,\r\n                }\r\n            })\r\n        });\r\n\r\n        if (!response.ok) {\r\n            const errorData = await response.json().catch(() => ({}));\r\n            throw new Error(\r\n                errorData.error?.message || \r\n                `API request failed with status ${response.status}. Please check your API key and try again.`\r\n            );\r\n        }\r\n\r\n        const data = await response.json();\r\n        if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {\r\n            let generatedText = data.candidates[0].content.parts[0].text.trim();\r\n\r\n            // Apply blacklist filtering if configured\r\n            if (settings.blacklist) {\r\n                const blacklistWords = settings.blacklist.split('\\n')\r\n                    .map(word => word.trim())\r\n                    .filter(word => word);\r\n                if (blacklistWords.length > 0) {\r\n                    const regex = new RegExp(blacklistWords.join('|'), 'gi');\r\n                    generatedText = generatedText.replace(regex, '***');\r\n                }\r\n            }\r\n\r\n            return generatedText;\r\n        } else {\r\n            throw new Error('The AI service returned an unexpected response format. Please try again.');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a comment based on the provided post content and poster name.\r\n     * @param {string} postContent - The content of the post to comment on.\r\n     * @param {string} posterName - The name of the poster.\r\n     * @returns {Promise<string>} The generated comment.\r\n     */\r\n    static async generateComment(postContent, posterName) {\r\n        try {\r\n            const settings = await this.getSettings();\r\n\r\n            // Validate API Key\r\n            if (!settings.apiKey) {\r\n                throw new Error('API key not configured. Please go to extension options and enter your Google AI API key.');\r\n            }\r\n\r\n            if (!/^[A-Za-z0-9-_]+$/.test(settings.apiKey)) {\r\n                throw new Error('Invalid API key format. Please check your API key in the extension options.');\r\n            }\r\n\r\n            // Validate Inputs\r\n            if (!postContent || !posterName) {\r\n                throw new Error('Missing required content for comment generation.');\r\n            }\r\n\r\n            // Construct Prompt\r\n            const prompt = settings.defaultPrompt\r\n                ? settings.defaultPrompt\r\n                    .replace('{content}', postContent)\r\n                    .replace('{name}', posterName)\r\n                : `Generate a professional comment for LinkedIn post by ${posterName}: \"${postContent}\"`;\r\n\r\n            // Make API Request\r\n            const comment = await this.makeApiRequest(prompt, settings);\r\n            return comment;\r\n        } catch (error) {\r\n            console.error('Error generating comment:', error);\r\n            // Enhance error message for user display\r\n            const userMessage = error.message.includes('API key') \r\n                ? error.message \r\n                : `Failed to generate comment: ${error.message}`;\r\n            throw new Error(userMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Generates a full LinkedIn post based on the provided article content and poster name.\r\n     * @param {string} articleContent - The content of the article to base the post on.\r\n     * @param {string} posterName - The name of the poster.\r\n     * @returns {Promise<string>} The generated LinkedIn post.\r\n     */\r\n    static async generatePost(articleContent, posterName) {\r\n        try {\r\n            const settings = await this.getSettings();\r\n\r\n            // Validate API Key\r\n            if (!settings.apiKey) {\r\n                throw new Error('API key not configured. Please go to extension options and enter your Google AI API key.');\r\n            }\r\n\r\n            if (!/^[A-Za-z0-9-_]+$/.test(settings.apiKey)) {\r\n                throw new Error('Invalid API key format. Please check your API key in the extension options.');\r\n            }\r\n\r\n            // Validate Inputs\r\n            if (!articleContent || !posterName) {\r\n                throw new Error('Missing required content for post generation.');\r\n            }\r\n\r\n            // Construct Prompt\r\n            const prompt = settings.defaultPrompt\r\n                ? settings.defaultPrompt\r\n                    .replace('{content}', articleContent)\r\n                    .replace('{name}', posterName)\r\n                : `Create a comprehensive LinkedIn post by ${posterName} based on the following article content: \"${articleContent}\"`;\r\n\r\n            // Make API Request\r\n            const post = await this.makeApiRequest(prompt, settings);\r\n            return post;\r\n        } catch (error) {\r\n            console.error('Error generating post:', error);\r\n            // Enhance error message for user display\r\n            const userMessage = error.message.includes('API key') \r\n                ? error.message \r\n                : `Failed to generate post: ${error.message}`;\r\n            throw new Error(userMessage);\r\n        }\r\n    }\r\n}\r\n","// src/background/background.js\r\n\r\nimport { APIService } from './api-services.js'; // Adjust the path as necessary\r\n\r\n// Listener for messages from other parts of the extension\r\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\r\n  console.log('Background received message:', message);\r\n\r\n  if (message.action === 'fetchArticle') {\r\n    const { url } = message;\r\n    console.log('Fetching article from:', url);\r\n\r\n    // Fetch the article content\r\n    fetch(url)\r\n      .then((response) => {\r\n        if (!response.ok) {\r\n          throw new Error(`Network response was not ok: ${response.statusText}`);\r\n        }\r\n        return response.text();\r\n      })\r\n      .then((htmlString) => {\r\n        console.log('Article fetched successfully.');\r\n        sendResponse({ html: htmlString });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching article:', error);\r\n        sendResponse({ error: 'Failed to fetch article content.' });\r\n      });\r\n\r\n    // Indicate that the response will be sent asynchronously\r\n    return true;\r\n  }\r\n\r\n  if (message.action === 'generateComment') {\r\n    const { posterName, articleContent } = message;\r\n    console.log(`Generating comment for poster: ${posterName}`);\r\n\r\n    APIService.generateComment(posterName, articleContent)\r\n      .then((comment) => {\r\n        console.log('Comment generated successfully.');\r\n        sendResponse({ comment });\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error generating comment:', error);\r\n        sendResponse({ error: 'Failed to generate comment.' });\r\n      });\r\n\r\n    // Indicate that the response will be sent asynchronously\r\n    return true;\r\n  }\r\n\r\n  // Handle unknown actions\r\n  console.warn('Unknown action:', message.action);\r\n});\r\n"],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_defineProperties","_toPropertyKey","key","toPrimitive","String","_toPrimitive","APIService","_classCallCheck","_getSettings","_callee","_context","reject","chrome","storage","sync","get","result","runtime","lastError","message","_makeApiRequest","_callee2","prompt","settings","_data$candidates$","model","apiUrl","response","_errorData$error","errorData","data","generatedText","blacklistWords","regex","_context2","aiModel","concat","apiKey","fetch","headers","body","JSON","stringify","contents","parts","text","generationConfig","temperature","maxOutputTokens","maxTokens","ok","json","error","status","candidates","content","trim","blacklist","split","map","word","filter","RegExp","join","replace","_x","_x2","_generateComment","_callee3","postContent","posterName","comment","userMessage","_context3","this","getSettings","test","defaultPrompt","makeApiRequest","t0","console","includes","_x3","_x4","_generatePost","_callee4","articleContent","post","_context4","_x5","_x6","onMessage","addListener","sender","sendResponse","log","action","url","statusText","htmlString","html","generateComment","warn"],"sourceRoot":""}